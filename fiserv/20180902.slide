Android Brandable View
with custom styleable attributes

* Approach

Each brandable view "read" its customised attributes' value *one-by-one*, then dynamically apply all together.

- All data must be combined to make sense

: Last year, we have realized the constructor on android.content.res.Resources(AssetManager, DisplayMetrics, Configuration) was deprecated in API 25. It left us a risk since our dynamic branding implementation is based on subclassing Resources. We will need to change how we do dynamic branding on Android before the deprecation is brought into effect. 
: We came up with 2 solutions which are either using data binding library or implementing customized attributes for each brandable view. In consideration of a minimum change on each layout/view and other concerns (Payment Plugin), we are planning to use the second approach: Mobiliti styleable views apply both native and customized attributes from XML layout decoration.

* Text

- Stateless

  android:text
  android:hint

* Text - Attributes

  <attr name="text" format="string" />
  <attr name="hint" format="string" />

: p
  <declare-styleable name="FIRadioButton">
    <attr name="text" />
  </declare-styleable>

  <declare-styleable name="FIEditView">
    <attr name="text" />
    <attr name="hint" />
  </declare-styleable>


* Text - Implementation

  BrandString {
    var mData: String
      set()

    fun create(): String = mDate
  }

  FIRadioButton {
    val mText = BrandString()
  }

  FIEditView {
    val mText = BrandString()
    val mHint = BrandString()
  }

* Text Color

- Stateful

  android:textColor
  android:textColorHint
  android:textColorLink

: p
  android:color="hex_color"
  android:state_pressed=["true" | "false"]
  android:state_focused=["true" | "false"]
  android:state_selected=["true" | "false"]
  android:state_checkable=["true" | "false"]
  android:state_checked=["true" | "false"]
  android:state_enabled=["true" | "false"]
  android:state_window_focused=["true" | "false"]

* Text Color - Attributes

Most likely to be used

  <attr name="textColor" format="color" />
  <attr name="textColor_disabled" format="color" />
  <attr name="textColorHint" format="color" />
  <attr name="textColorLink" format="color" />

Unlikely to be used

  <attr name="textColor_focused" format="color" />
  <attr name="textColor_unfocused" format="color" />
  <attr name="textColor_focused_checked" format="color" />
  <attr name="textColor_unfocused_checked" format="color" />
  ...
  <attr name="textColorHint_disabled" format="color" />
  ...
  <attr name="textColorLink_disabled" format="color" />
  ...

* State - Implementation

<selector> default value should always be last

  State<T> {
    val mPriority: Int
    val mState: Int[]
    val mData: T
  }

  StateList<T>{
    val mStates: PriorityQueue<State<T>>
  }

* Text Color - Implementation

  BrandColor {
    val mColorStateList: StateList<Int>

    fun create(): ColorStateList {
      forEach state in mColorStateList:
          stateArray[index] = state.mState
          colors[index] = state.mData

      return ColorStateList(stateArray, colors)
    }
  }

  FIEditView {
    val mTextColor = BrandColor()

    when attr:
        R.attr.FIEditView_textColor_disabled ->
          mTextColor.addState(1, int[]{-R.attr.state_enable}, repo.getColor(resId))
        R.attr.FIEditView_textColor ->
          mTextColor.addState(0, int[]{}, repo.getColor(resId))
  }

* Background

- Stateful

  android:background
  android:backgroundTint

: p
  android:drawable="@[package:]drawable/drawable_resource"
  android:state_pressed=["true" | "false"]
  android:state_focused=["true" | "false"]
  android:state_hovered=["true" | "false"]
  android:state_selected=["true" | "false"]
  android:state_checkable=["true" | "false"]
  android:state_checked=["true" | "false"]
  android:state_enabled=["true" | "false"]
  android:state_activated=["true" | "false"]
  android:state_window_focused=["true" | "false"] />

* Background - Attributes

Most likely to be used

  <attr name="background" format="reference | color" />
  <attr name="background_disabled" format="reference | color" />
  <attr name="background_pressed" format="reference | color" />
  <attr name="background_focused" format="reference | color" />
  <attr name="backgroundTint" format="color" />

Unlikely to be used

  <attr name="background_activated" format="color" />
  <attr name="background_deactivated" format="color" />
  <attr name="background_focused_checked" format="color" />
  <attr name="background_unfocused_checked" format="color" />
  ...

* Background - Shape
  <shape
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape=["rectangle" | "oval" | "line" | "ring"] >
    <corners
      android:radius="integer"
      ... />
    <gradient
      ... />
    <padding
      ... />
    <size
      ... />
    <solid
      android:color="color" />
    <stroke
      android:width="integer"
      android:color="color"
      ... />
  </shape>


* Background - Implementation

  BrandDrawable {
    val mDrawableStateList: StateList<Drawable>
    // val mShapeStateList: StateList<Shape>
    // or val mCornersRadius: Int

    fun create(): Drawable {
      forEach state in mStateList:
        ...

      return
        ColorDrawable(...)
        or RippleDrawable(...)
        or GradientDrawable(...)
        or StateListDrawable(...)
        or ...
    }
  }
