Android Brandable View
with custom styleable attributes
11:07 1 Mar 2019

* Agenda

: Last year, we have realized the constructor on android.content.res.Resources(AssetManager, DisplayMetrics, Configuration) was deprecated in API 25. It left us a risk since our dynamic branding implementation is based on subclassing Resources. We will need to change how we do dynamic branding on Android before the deprecation is brought into effect. 
: We came up with 2 solutions which are either using data binding library or implementing customized attributes for each brandable view. In consideration of a minimum change on each layout/view and other concerns (Payment Plugin), we are planning to use the second approach: Mobiliti styleable views apply both native and customized attributes from XML layout decoration.

- Approach & Why
- Stateless Text example
- Statefull TextColor example
- Statefull Background example
- Showcase
- Tricky
- Ugly

* Approach

Mobiliti brandable views apply both native and customised attributes from XML layout decoration.

- How to read
    Let Android native mechanism do the work.

- How to apply
    We control how FI**View is branded from attributes' value.

- Why
    It's not hacky.
    It has minimum code changes required (view / layout / plugin).

* Text

- Native attributes

.code code/text /START_native_attr OMIT/,/STOP_native_attr OMIT/

* Text

.code code/text /START_branding OMIT/,/STOP_branding OMIT/ HL_attr

* Text Color

- Native attributes

.code code/text-color /START_native_attr OMIT/,/STOP_native_attr OMIT/

- Customized attributes

.code code/text-color /START_customized_attr OMIT/,/STOP_customized_attr OMIT/

* ColorStateList

.iframe http://www.dre.vanderbilt.edu/~schmidt/android/android-4.0/out/target/common/docs/doc-comment-check/reference/android/content/res/ColorStateList.html 550 1024

.caption [[http://www.dre.vanderbilt.edu/~schmidt/android/android-4.0/out/target/common/docs/doc-comment-check/license.html][Android Open Source Project]]

* Text Color

.code -edit code/text-color /START_branding OMIT/,/STOP_branding OMIT/ HL_attr

* Background

- Native attributes

.code code/background /START_native_attr OMIT/,/STOP_native_attr OMIT/

- Customized attributes

.code code/background /START_customized_attr OMIT/,/STOP_customized_attr OMIT/

* Background

.code -edit code/background /START_branding OMIT/,/STOP_branding OMIT/ HL_attr

* Shape Drawable

.iframe http://www.dre.vanderbilt.edu/~schmidt/android/android-4.0/out/target/common/docs/doc-comment-check/guide/topics/resources/drawable-resource.html#Shape 550 1024

.caption [[http://www.dre.vanderbilt.edu/~schmidt/android/android-4.0/out/target/common/docs/doc-comment-check/license.html][Android Open Source Project]]

* Tint Mode

.iframe http://www.dre.vanderbilt.edu/~schmidt/android/android-4.0/out/target/common/docs/doc-comment-check/reference/android/graphics/PorterDuff.Mode.html 550 1024

.caption [[http://www.dre.vanderbilt.edu/~schmidt/android/android-4.0/out/target/common/docs/doc-comment-check/license.html][Android Open Source Project]]

* Tint Mode

show some imgs

* Tricky

code show: add 2 ints and sort 

* Ugly

- States are order-senstive (eg: focused > pressed)

- Impassible to support all states

- Tint by one color per state: cannot "brand" two different color at the same time
