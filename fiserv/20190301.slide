Android Brandable View
with custom styleable attributes
11:07 1 Mar 2019

* Approach

Mobiliti brandable views apply both native and customised attributes from XML layout decoration.

- How to read
    Let Android native mechanism do the work.

- How to apply
    We control how FI**View is branded from attributes' value.
    
* Text

- Native attributes

    android:text

- Pseudo code

    FIAppCompatButton:

        forEach <attr, resId, type> {
            if attr is android.R.attr.text:
                setText(repo.string(resId))
        }

* Text Color

- Native attributes

    android:textColor

- Customized attributes

    <attr name="textColor_default" format="color" />
    <attr name="textColor_disabled" format="color" />

    <declare-styleable name="FIAppCompatButton">
        <attr name="textColor_default" />
        <attr name="textColor_disabled" />
    </declare-styleable>

* Text Color

- Pseudo code

    FIAppCompatButton:

        val mTextColor: PriorityQueue<State> // <selector> is order-sensitive

        forEach <attr, resId, type> {
            if attr is android.R.attr.textColor:
                if type is ColorInt:
                    setTextColor(repo.color(resId))
            if attr is R.attr.FIAppCompatButton_textColor_default:
                mTextColor.addState(0, int[]{}, repo.color(resId))
            if attr is R.attr.FIAppCompatButton_textColor_disabled:
                mTextColor.addState(100, int[]{-R.attr.state_enable}, repo.color(resId))
        }

        if mTextColor is not empty:
            setTextColor(mTextColor.buildColorStateList())

* Background

- Native attributes

    android:background
    android:backgroundTint
    android:backgroundMode

- Customized attributes

    <attr name="background_tint_default" format="reference | color" />
    <attr name="background_tint_disabled" format="reference | color" />

    <declare-styleable name="FIAppCompatButton">
        <attr name="background_tint_default" />
        <attr name="background_tint_disabled" />
    </declare-styleable>

* Background

- Shape

    <shape xmlns:android="http://schemas.android.com/apk/res/android"
        android:shape=["rectangle" | "oval" | "line" | "ring"] >
        <corners 
            android:radius="integer" ... />
        <gradient ... />
        <padding ... />
        <size ... />
        <solid 
            android:color="color" />
        <stroke 
            android:width="integer" 
            android:color="color" ... />
    </shape>

* Background

- Pseudo code

    FIAppCompatButton:

        val mBackgroundTint: PriorityQueue<State>

        forEach <attr, resId, type> {
            if attr is android.R.attr.background:
                if type is ColorInt:
                    setBackgroundColor(repo.color(resId));
                else:
                    setBackground(repo.drawable(context, resId))
            if attr is android.R.attr.backgroundTint:
                if type is ColorInt:
                    setBackgroundTintList(ColorStateList(repo.color(resId))
            if attr is R.attr.FIAppCompatButton_background_tint_default:
                mBackgroundTint.addState(0, int[]{}, repo.color(resId))
            if attr is R.attr.FIAppCompatButton_background_tint_disabled:
                mBackgroundTint.addState(100, int[]{-R.attr.state_enable}, repo.color(resId))
        }

        if mBackgroundTint is not empty:
            setBackgroundTintList(mBackgroundTint.buildColorStateList());

* Stateful

- Color

    android:color="hex_color"
    android:state_pressed=["true" | "false"]
    android:state_focused=["true" | "false"]
    android:state_selected=["true" | "false"]
    android:state_checkable=["true" | "false"]
    android:state_checked=["true" | "false"]
    android:state_enabled=["true" | "false"]
    android:state_window_focused=["true" | "false"]

- Drawable

    android:drawable="@[package:]drawable/drawable_resource"
    android:state_pressed=["true" | "false"]
    android:state_focused=["true" | "false"]
    android:state_hovered=["true" | "false"]
    android:state_selected=["true" | "false"]
    android:state_checkable=["true" | "false"]
    android:state_checked=["true" | "false"]
    android:state_enabled=["true" | "false"]
    android:state_activated=["true" | "false"]
    android:state_window_focused=["true" | "false"] />

